// This is your Prisma schema file for SQLite (local development)
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Simplified User Management for SQLite
model User {
  id              String         @id @default(uuid())
  email           String         @unique
  username        String?        @unique
  passwordHash    String
  
  // Profile
  firstName       String?
  lastName        String?
  avatarUrl       String?
  
  // Account Status
  isActive        Boolean        @default(true)
  isVerified      Boolean        @default(false)
  verificationToken String?
  
  // Subscription (using strings instead of enums for SQLite)
  subscriptionTier String        @default("FREE") // FREE, BASIC, PRO, ENTERPRISE
  subscriptionEndDate DateTime?
  stripeCustomerId String?       @unique
  
  // Usage Limits
  dailyGenerationCount Int       @default(0)
  dailyGenerationResetAt DateTime @default(now())
  totalGenerationCount Int       @default(0)
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastLoginAt     DateTime?
  
  // Relations
  jobs            Job[]
  generations     Generation[]
  exports         Export[]
  media           Media[]
  
  @@index([email])
  @@index([stripeCustomerId])
}

// Core Job System (simplified for SQLite)
model Job {
  id          String   @id @default(cuid())
  type        String   // GENERATE, EXPORT (using string instead of enum)
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  prompt      String?
  mode        String   @default("VERTICAL") // VERTICAL, HORIZONTAL
  inputFile   String?
  outputFile  String?
  metadata    String?  // JSON stored as string for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Additional useful fields
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress    Int      @default(0) // 0-100 for progress tracking
  errorMessage String? // Error details if status is FAILED
  startedAt   DateTime? // When processing started
  completedAt DateTime? // When job finished
  
  // Relations
  generation  Generation?
  
  @@index([type])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
}

// Video Generation (simplified)
model Generation {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Link to core job system
  coreJobId       String?         @unique
  coreJob         Job?            @relation(fields: [coreJobId], references: [id])
  
  // Generation Configuration
  mode            String          @default("VERTICAL_FIRST") // String instead of enum
  prompt          String
  processedPrompt String?         // After vertical logic applied
  referenceImageId String?
  referenceImage  Media?          @relation("ReferenceImage", fields: [referenceImageId], references: [id])
  
  // Veo 3 Settings
  model           String          @default("veo-3.0-generate-preview")
  duration        Int             @default(5)  // seconds
  fps             Int             @default(30)
  resolution      String          @default("1920x1080")
  backgroundMode  String?         @default("MINIMAL_GRADIENT") // String instead of enum
  
  // Job Status
  status          String          @default("PENDING") // String instead of enum
  bullJobId       String?         @unique  // BullMQ job ID
  progress        Int             @default(0)
  errorMessage    String?
  
  // API Response
  veoOperationId  String?         @unique
  veoResponse     String?         // JSON stored as string
  
  // Output
  outputMediaId   String?         @unique
  outputMedia     Media?          @relation("GeneratedVideo", fields: [outputMediaId], references: [id])
  
  // Metadata
  estimatedCost   Float?
  actualCost      Float?
  processingTime  Int?            // milliseconds
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Relations
  exports         Export[]
  
  @@index([userId])
  @@index([status])
  @@index([bullJobId])
  @@index([veoOperationId])
}

// Export Jobs
model Export {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Source
  generationId    String?
  generation      Generation?   @relation(fields: [generationId], references: [id])
  sourceMediaId   String
  sourceMedia     Media         @relation("ExportSource", fields: [sourceMediaId], references: [id])
  
  // Export Configuration
  exportType      String        // String instead of enum
  outputFormat    String        @default("MP4")
  preset          String?       // TikTok, Reels, Shorts, Custom
  
  // Video Settings
  resolution      String        @default("1080x1920")
  fps             Int           @default(30)
  bitrate         String?
  codec           String        @default("libx264")
  crf             Int           @default(18)
  
  // Crop Settings (for vertical export)
  cropX           Int?
  cropY           Int?
  cropWidth       Int?
  cropHeight      Int?
  
  // FFmpeg Command
  ffmpegCommand   String
  
  // Job Status
  status          String        @default("PENDING")
  jobId           String?       @unique
  progress        Int           @default(0)
  errorMessage    String?
  
  // Output
  outputMediaId   String?       @unique
  outputMedia     Media?        @relation("ExportOutput", fields: [outputMediaId], references: [id])
  
  // Metadata
  processingTime  Int?          // milliseconds
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([jobId])
}

// Media Storage
model Media {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File Information
  filename        String
  originalName    String
  mimeType        String
  fileSize        Int           // bytes
  
  // Storage
  storageType     String        @default("LOCAL") // String instead of enum
  storagePath     String        // Path in storage system
  publicUrl       String?       // CDN URL if available
  thumbnailUrl    String?
  
  // Video Metadata
  duration        Float?        // seconds
  width           Int?
  height          Int?
  fps             Float?
  codec           String?
  hasAudio        Boolean       @default(true)
  
  // Watermark Info
  hasSynthId      Boolean       @default(false)  // Veo 3 watermark
  
  // Status
  status          String        @default("UPLOADING") // String instead of enum
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  expiresAt       DateTime?     // For temporary files
  
  // Relations (reverse)
  generationsAsReference Generation[] @relation("ReferenceImage")
  generationsAsOutput    Generation[] @relation("GeneratedVideo")
  exportsAsSource        Export[]     @relation("ExportSource")
  exportsAsOutput        Export[]     @relation("ExportOutput")
  
  @@index([userId])
  @@index([status])
  @@index([storageType])
}